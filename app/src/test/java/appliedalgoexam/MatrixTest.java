/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package appliedalgoexam;

import static org.junit.Assert.*;

import org.junit.Test;

public class MatrixTest {

  Matrix matrix = new Matrix(3, 3, new double[] { 2, 2, 2, 2, 2, 2, 2, 2, 2 });

  Matrix otherMatrix = new Matrix(
    3,
    3,
    new double[] { 3, 3, 3, 3, 3, 3, 3, 3, 3 }
  );
  Matrix otherMatrix1 = new Matrix(
    3,
    3,
    new double[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }
  );

  Matrix otherMatrix2 = new Matrix(
    4,
    4,
    new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }
  );

  Matrix matrixForTranspose = new Matrix(
    3,
    3,
    new double[] { 1, 2, 3, 4, 0, 1, 2, 0, 0 }
  );

  @Test
  public void testElementaryMultiplication() {
    Matrix result = Matrix.elementaryMultiplication(matrix, otherMatrix);
    Matrix result1 = Matrix.elementaryMultiplication(matrix, otherMatrix1);

    // This is because the elementaryMultiplication method performs a matrix multiplication,
    // not an element-wise multiplication. In a matrix multiplication, the element at position (i, j)
    // in the result matrix is calculated by taking the dot product of the i-th row of the first
    //  matrix and the j-th column of the second matrix.

    // Since both matrix and otherMatrix are 3x3 matrices with all elements equal to 2 and 3,
    // respectively, the dot product of any row in matrix and any column in otherMatrix will
    //  be equal to 6. Therefore, all elements of the result matrix C will be equal to 18.

    for (int i = 0; i < result.rows; i++) {
      for (int j = 0; j < result.cols; j++) {
        assertEquals(Double.valueOf(18), Double.valueOf(result.get(i, j)));
      }
    }
    for (int i = 0; i < result.rows; i++) {
      for (int j = 0; j < result.cols; j++) {
        assertEquals(Double.valueOf(0), Double.valueOf(result1.get(i, j)));
      }
    }
  }

  @Test
  public void testTranspose() {
    Matrix transposedMatrix = matrixForTranspose.transpose();
    for (int i = 0; i < matrixForTranspose.rows; i++) {
      for (int j = 0; j < matrixForTranspose.cols; j++) {
        assertEquals(
          Double.valueOf(matrixForTranspose.get(i, j)),
          Double.valueOf(transposedMatrix.get(j, i))
        );
      }
    }

    Matrix transposedOtherMatrix = otherMatrix.transpose();
    for (int i = 0; i < otherMatrix.rows; i++) {
      for (int j = 0; j < otherMatrix.cols; j++) {
        assertEquals(
          Double.valueOf(otherMatrix.get(i, j)),
          Double.valueOf(transposedOtherMatrix.get(j, i))
        );
      }
    }
    Matrix transposedOtherMatrix2 = otherMatrix2.transpose();
    for (int i = 0; i < otherMatrix2.rows; i++) {
      for (int j = 0; j < otherMatrix2.cols; j++) {
        assertEquals(
          Double.valueOf(otherMatrix2.get(i, j)),
          Double.valueOf(transposedOtherMatrix2.get(j, i))
        );
      }
    }
  }

  @Test
  public void testTransposeRec() {
    Matrix transposedMatrix = otherMatrix2.transpose();
    Matrix transposedMatrix1 = otherMatrix1.transpose();
    Matrix.transposeRec(otherMatrix2, transposedMatrix, 1);
    Matrix.transposeRec(otherMatrix1, transposedMatrix1, 78877887);

    for (int i = 0; i < otherMatrix2.rows; i++) {
      for (int j = 0; j < otherMatrix2.cols; j++) {
        assertEquals(
          Double.valueOf(otherMatrix2.get(i, j)),
          Double.valueOf(transposedMatrix.get(j, i))
        );
      }
    }
    for (int i = 0; i < otherMatrix1.rows; i++) {
      for (int j = 0; j < otherMatrix1.cols; j++) {
        assertEquals(
          Double.valueOf(otherMatrix1.get(i, j)),
          Double.valueOf(transposedMatrix1.get(j, i))
        );
      }
    }
  }

  @Test
  public void testElementaryMultiplicationTransposed() {
    Matrix A = new Matrix(3, 3, new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
    Matrix B = new Matrix(3, 3, new double[] { 9, 8, 7, 6, 5, 4, 3, 2, 1 });
    Matrix C = Matrix.transposedMultiplication(A, B, 3);
    Matrix D = new Matrix(
      3,
      3,
      new double[] { 30, 24, 18, 84, 69, 54, 138, 114, 90 }
    );
    assertEquals(D, C);

    Matrix A2 = new Matrix(2, 2, new double[] { 1, 2, 3, 4 });
    Matrix B2 = new Matrix(2, 2, new double[] { 5, 6, 7, 8 });
    C = Matrix.transposedMultiplication(A2, B2, 4);
    D = new Matrix(2, 2, new double[] { 19, 22, 43, 50 });
    assertEquals(D, C);
  }

  @Test
  public void testTiledMultiplication() {
    Matrix A = new Matrix(2, 2, new double[] { 1, 2, 3, 4 });
    Matrix B = new Matrix(2, 2, new double[] { 5, 6, 7, 8 });
    Matrix C = Matrix.tiledMultiplication(A, B, 1);
    Matrix D = new Matrix(2, 2, new double[] { 19, 22, 43, 50 });
    assertEquals(D, C);

    Matrix A2 = new Matrix(3, 3, new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
    Matrix B2 = new Matrix(3, 3, new double[] { 9, 8, 7, 6, 5, 4, 3, 2, 1 });
    C = Matrix.tiledMultiplication(A2, B2, 3);
    D = new Matrix(3, 3, new double[] { 30, 24, 18, 84, 69, 54, 138, 114, 90 });
    assertEquals(D, C);
  }

  @Test
  public void testRecursiveMultiplication() {
    Matrix A = new Matrix(2, 2, new double[] { 1, 2, 3, 4 });
    Matrix B = new Matrix(2, 2, new double[] { 5, 6, 7, 8 });
    Matrix C = new Matrix(2, 2);
    Matrix.recursiveMultiplication(A, B, C, 2);
    Matrix D = new Matrix(2, 2, new double[] { 19, 22, 43, 50 });
    assertEquals(D, C);

    Matrix A2 = new Matrix(3, 3, new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
    Matrix B2 = new Matrix(3, 3, new double[] { 9, 8, 7, 6, 5, 4, 3, 2, 1 });
    Matrix C2 = new Matrix(3, 3);
    Matrix.recursiveMultiplication(A2, B2, C2, 3);
    Matrix D2 = new Matrix(
      3,
      3,
      new double[] { 30, 24, 18, 84, 69, 54, 138, 114, 90 }
    );
    assertEquals(D2, C2);
  }

  @Test
  public void testStrassen() {
    Matrix A = new Matrix(2, 2, new double[] { 1, 2, 3, 4 });
    Matrix B = new Matrix(2, 2, new double[] { 5, 6, 7, 8 });
    Matrix C = new Matrix(2, 2);
    Matrix.strassen(A, B, C, 2);
    Matrix D = new Matrix(2, 2, new double[] { 19, 22, 43, 50 });
    assertEquals(D, C);

    Matrix A2 = new Matrix(3, 3, new double[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });
    Matrix B2 = new Matrix(3, 3, new double[] { 9, 8, 7, 6, 5, 4, 3, 2, 1 });
    Matrix C2 = new Matrix(3, 3);
    Matrix.strassen(A2, B2, C2, 3);
    Matrix D2 = new Matrix(
      3,
      3,
      new double[] { 30, 24, 18, 84, 69, 54, 138, 114, 90 }
    );
    assertEquals(D2, C2);




  }
}
